#!/bin/bash
set -xeuo pipefail

. ${KOLA_EXT_DATA}/libtest.sh

tmpdir=$(mktemp -d)
cd ${tmpdir}
echo "using tmpdir: ${tmpdir}"
touch .testtmp
trap cleanup EXIT
function cleanup () {
  if test -z "${TEST_SKIP_CLEANUP:-}"; then
    if test -f "${tmpdir}"/.testtmp; then
      cd /
      rm "${tmpdir}" -rf
    fi
  else
    echo "Skipping cleanup of ${tmpdir}"
  fi
}

efibasedir=/boot/efi/
bootupdir=/usr/lib/bootupd/updates
efiupdir=${bootupdir}/EFI
ostbaseefi=/usr/lib/ostree-boot/efi/
efisubdir=EFI/fedora
efidir=${efiupdir}/${efisubdir}
ostefi=${ostbaseefi}/${efisubdir}
shim=shimx64.efi

test -f "${efidir}"/${shim}
test -f "${ostefi}"/${shim}

bootupd() {
    runv /usr/libexec/bootupd "$@"
}

prepare_efi_update() {
  test -w /usr
  cp -a ${efiupdir}.orig ${ostbaseefi}
  rm -rf ${efiupdir} ${bootupdir}/EFI.json
}

systemctl start bootupd.socket

bootupd status > out.txt
assert_file_has_content_literal out.txt 'Component EFI'
assert_file_has_content_literal out.txt '  Installed: grub2-efi-x64-'
assert_file_has_content_literal out.txt 'Update: At latest version'

# From here we'll fake updates
rpm-ostree usroverlay
# Save a backup copy of the update dir
cp -a ${efiupdir}{,.orig}

prepare_efi_update

# FIXME need to generate RPMs to sanely test updates

tap_finish
